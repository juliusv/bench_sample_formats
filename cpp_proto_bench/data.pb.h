// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace io {
namespace prometheus {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class LabelPair;
class LabelName;
class Metric;
class Fingerprint;
class FingerprintCollection;
class LabelSet;
class SampleKey;
class SampleValueSeries;
class SampleValueSeries_Value;
class MembershipIndexValue;
class MetricHighWatermark;
class CompactionProcessorDefinition;
class CurationKey;
class CurationValue;
class DeletionProcessorDefinition;

// ===================================================================

class LabelPair : public ::google::protobuf::Message {
 public:
  LabelPair();
  virtual ~LabelPair();
  
  LabelPair(const LabelPair& from);
  
  inline LabelPair& operator=(const LabelPair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelPair& default_instance();
  
  void Swap(LabelPair* other);
  
  // implements Message ----------------------------------------------
  
  LabelPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelPair& from);
  void MergeFrom(const LabelPair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:io.prometheus.LabelPair)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static LabelPair* default_instance_;
};
// -------------------------------------------------------------------

class LabelName : public ::google::protobuf::Message {
 public:
  LabelName();
  virtual ~LabelName();
  
  LabelName(const LabelName& from);
  
  inline LabelName& operator=(const LabelName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelName& default_instance();
  
  void Swap(LabelName* other);
  
  // implements Message ----------------------------------------------
  
  LabelName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelName& from);
  void MergeFrom(const LabelName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:io.prometheus.LabelName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static LabelName* default_instance_;
};
// -------------------------------------------------------------------

class Metric : public ::google::protobuf::Message {
 public:
  Metric();
  virtual ~Metric();
  
  Metric(const Metric& from);
  
  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();
  
  void Swap(Metric* other);
  
  // implements Message ----------------------------------------------
  
  Metric* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .io.prometheus.LabelPair label_pair = 1;
  inline int label_pair_size() const;
  inline void clear_label_pair();
  static const int kLabelPairFieldNumber = 1;
  inline const ::io::prometheus::LabelPair& label_pair(int index) const;
  inline ::io::prometheus::LabelPair* mutable_label_pair(int index);
  inline ::io::prometheus::LabelPair* add_label_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >&
      label_pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >*
      mutable_label_pair();
  
  // @@protoc_insertion_point(class_scope:io.prometheus.Metric)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair > label_pair_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Metric* default_instance_;
};
// -------------------------------------------------------------------

class Fingerprint : public ::google::protobuf::Message {
 public:
  Fingerprint();
  virtual ~Fingerprint();
  
  Fingerprint(const Fingerprint& from);
  
  inline Fingerprint& operator=(const Fingerprint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fingerprint& default_instance();
  
  void Swap(Fingerprint* other);
  
  // implements Message ----------------------------------------------
  
  Fingerprint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fingerprint& from);
  void MergeFrom(const Fingerprint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  
  // @@protoc_insertion_point(class_scope:io.prometheus.Fingerprint)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* signature_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Fingerprint* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintCollection : public ::google::protobuf::Message {
 public:
  FingerprintCollection();
  virtual ~FingerprintCollection();
  
  FingerprintCollection(const FingerprintCollection& from);
  
  inline FingerprintCollection& operator=(const FingerprintCollection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintCollection& default_instance();
  
  void Swap(FingerprintCollection* other);
  
  // implements Message ----------------------------------------------
  
  FingerprintCollection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintCollection& from);
  void MergeFrom(const FingerprintCollection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .io.prometheus.Fingerprint member = 1;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 1;
  inline const ::io::prometheus::Fingerprint& member(int index) const;
  inline ::io::prometheus::Fingerprint* mutable_member(int index);
  inline ::io::prometheus::Fingerprint* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::Fingerprint >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::Fingerprint >*
      mutable_member();
  
  // @@protoc_insertion_point(class_scope:io.prometheus.FingerprintCollection)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::io::prometheus::Fingerprint > member_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static FingerprintCollection* default_instance_;
};
// -------------------------------------------------------------------

class LabelSet : public ::google::protobuf::Message {
 public:
  LabelSet();
  virtual ~LabelSet();
  
  LabelSet(const LabelSet& from);
  
  inline LabelSet& operator=(const LabelSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSet& default_instance();
  
  void Swap(LabelSet* other);
  
  // implements Message ----------------------------------------------
  
  LabelSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelSet& from);
  void MergeFrom(const LabelSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .io.prometheus.LabelPair member = 1;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 1;
  inline const ::io::prometheus::LabelPair& member(int index) const;
  inline ::io::prometheus::LabelPair* mutable_member(int index);
  inline ::io::prometheus::LabelPair* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >*
      mutable_member();
  
  // @@protoc_insertion_point(class_scope:io.prometheus.LabelSet)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair > member_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static LabelSet* default_instance_;
};
// -------------------------------------------------------------------

class SampleKey : public ::google::protobuf::Message {
 public:
  SampleKey();
  virtual ~SampleKey();
  
  SampleKey(const SampleKey& from);
  
  inline SampleKey& operator=(const SampleKey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleKey& default_instance();
  
  void Swap(SampleKey* other);
  
  // implements Message ----------------------------------------------
  
  SampleKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleKey& from);
  void MergeFrom(const SampleKey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .io.prometheus.Fingerprint fingerprint = 1;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 1;
  inline const ::io::prometheus::Fingerprint& fingerprint() const;
  inline ::io::prometheus::Fingerprint* mutable_fingerprint();
  inline ::io::prometheus::Fingerprint* release_fingerprint();
  
  // optional bytes timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const void* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  
  // optional sfixed64 last_timestamp = 3;
  inline bool has_last_timestamp() const;
  inline void clear_last_timestamp();
  static const int kLastTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 last_timestamp() const;
  inline void set_last_timestamp(::google::protobuf::int64 value);
  
  // optional fixed32 sample_count = 4;
  inline bool has_sample_count() const;
  inline void clear_sample_count();
  static const int kSampleCountFieldNumber = 4;
  inline ::google::protobuf::uint32 sample_count() const;
  inline void set_sample_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:io.prometheus.SampleKey)
 private:
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_last_timestamp();
  inline void clear_has_last_timestamp();
  inline void set_has_sample_count();
  inline void clear_has_sample_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::io::prometheus::Fingerprint* fingerprint_;
  ::std::string* timestamp_;
  ::google::protobuf::int64 last_timestamp_;
  ::google::protobuf::uint32 sample_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static SampleKey* default_instance_;
};
// -------------------------------------------------------------------

class SampleValueSeries_Value : public ::google::protobuf::Message {
 public:
  SampleValueSeries_Value();
  virtual ~SampleValueSeries_Value();
  
  SampleValueSeries_Value(const SampleValueSeries_Value& from);
  
  inline SampleValueSeries_Value& operator=(const SampleValueSeries_Value& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleValueSeries_Value& default_instance();
  
  void Swap(SampleValueSeries_Value* other);
  
  // implements Message ----------------------------------------------
  
  SampleValueSeries_Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleValueSeries_Value& from);
  void MergeFrom(const SampleValueSeries_Value& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // optional double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);
  
  // @@protoc_insertion_point(class_scope:io.prometheus.SampleValueSeries.Value)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 timestamp_;
  double value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static SampleValueSeries_Value* default_instance_;
};
// -------------------------------------------------------------------

class SampleValueSeries : public ::google::protobuf::Message {
 public:
  SampleValueSeries();
  virtual ~SampleValueSeries();
  
  SampleValueSeries(const SampleValueSeries& from);
  
  inline SampleValueSeries& operator=(const SampleValueSeries& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleValueSeries& default_instance();
  
  void Swap(SampleValueSeries* other);
  
  // implements Message ----------------------------------------------
  
  SampleValueSeries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleValueSeries& from);
  void MergeFrom(const SampleValueSeries& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SampleValueSeries_Value Value;
  
  // accessors -------------------------------------------------------
  
  // repeated .io.prometheus.SampleValueSeries.Value value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::io::prometheus::SampleValueSeries_Value& value(int index) const;
  inline ::io::prometheus::SampleValueSeries_Value* mutable_value(int index);
  inline ::io::prometheus::SampleValueSeries_Value* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::SampleValueSeries_Value >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::SampleValueSeries_Value >*
      mutable_value();
  
  // @@protoc_insertion_point(class_scope:io.prometheus.SampleValueSeries)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::io::prometheus::SampleValueSeries_Value > value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static SampleValueSeries* default_instance_;
};
// -------------------------------------------------------------------

class MembershipIndexValue : public ::google::protobuf::Message {
 public:
  MembershipIndexValue();
  virtual ~MembershipIndexValue();
  
  MembershipIndexValue(const MembershipIndexValue& from);
  
  inline MembershipIndexValue& operator=(const MembershipIndexValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MembershipIndexValue& default_instance();
  
  void Swap(MembershipIndexValue* other);
  
  // implements Message ----------------------------------------------
  
  MembershipIndexValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MembershipIndexValue& from);
  void MergeFrom(const MembershipIndexValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:io.prometheus.MembershipIndexValue)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static MembershipIndexValue* default_instance_;
};
// -------------------------------------------------------------------

class MetricHighWatermark : public ::google::protobuf::Message {
 public:
  MetricHighWatermark();
  virtual ~MetricHighWatermark();
  
  MetricHighWatermark(const MetricHighWatermark& from);
  
  inline MetricHighWatermark& operator=(const MetricHighWatermark& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricHighWatermark& default_instance();
  
  void Swap(MetricHighWatermark* other);
  
  // implements Message ----------------------------------------------
  
  MetricHighWatermark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricHighWatermark& from);
  void MergeFrom(const MetricHighWatermark& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:io.prometheus.MetricHighWatermark)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static MetricHighWatermark* default_instance_;
};
// -------------------------------------------------------------------

class CompactionProcessorDefinition : public ::google::protobuf::Message {
 public:
  CompactionProcessorDefinition();
  virtual ~CompactionProcessorDefinition();
  
  CompactionProcessorDefinition(const CompactionProcessorDefinition& from);
  
  inline CompactionProcessorDefinition& operator=(const CompactionProcessorDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactionProcessorDefinition& default_instance();
  
  void Swap(CompactionProcessorDefinition* other);
  
  // implements Message ----------------------------------------------
  
  CompactionProcessorDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactionProcessorDefinition& from);
  void MergeFrom(const CompactionProcessorDefinition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 minimum_group_size = 1;
  inline bool has_minimum_group_size() const;
  inline void clear_minimum_group_size();
  static const int kMinimumGroupSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 minimum_group_size() const;
  inline void set_minimum_group_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:io.prometheus.CompactionProcessorDefinition)
 private:
  inline void set_has_minimum_group_size();
  inline void clear_has_minimum_group_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 minimum_group_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static CompactionProcessorDefinition* default_instance_;
};
// -------------------------------------------------------------------

class CurationKey : public ::google::protobuf::Message {
 public:
  CurationKey();
  virtual ~CurationKey();
  
  CurationKey(const CurationKey& from);
  
  inline CurationKey& operator=(const CurationKey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurationKey& default_instance();
  
  void Swap(CurationKey* other);
  
  // implements Message ----------------------------------------------
  
  CurationKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurationKey& from);
  void MergeFrom(const CurationKey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .io.prometheus.Fingerprint fingerprint = 1;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 1;
  inline const ::io::prometheus::Fingerprint& fingerprint() const;
  inline ::io::prometheus::Fingerprint* mutable_fingerprint();
  inline ::io::prometheus::Fingerprint* release_fingerprint();
  
  // optional string processor_message_type_name = 2;
  inline bool has_processor_message_type_name() const;
  inline void clear_processor_message_type_name();
  static const int kProcessorMessageTypeNameFieldNumber = 2;
  inline const ::std::string& processor_message_type_name() const;
  inline void set_processor_message_type_name(const ::std::string& value);
  inline void set_processor_message_type_name(const char* value);
  inline void set_processor_message_type_name(const char* value, size_t size);
  inline ::std::string* mutable_processor_message_type_name();
  inline ::std::string* release_processor_message_type_name();
  
  // optional bytes processor_message_raw = 3;
  inline bool has_processor_message_raw() const;
  inline void clear_processor_message_raw();
  static const int kProcessorMessageRawFieldNumber = 3;
  inline const ::std::string& processor_message_raw() const;
  inline void set_processor_message_raw(const ::std::string& value);
  inline void set_processor_message_raw(const char* value);
  inline void set_processor_message_raw(const void* value, size_t size);
  inline ::std::string* mutable_processor_message_raw();
  inline ::std::string* release_processor_message_raw();
  
  // optional int64 ignore_younger_than = 4;
  inline bool has_ignore_younger_than() const;
  inline void clear_ignore_younger_than();
  static const int kIgnoreYoungerThanFieldNumber = 4;
  inline ::google::protobuf::int64 ignore_younger_than() const;
  inline void set_ignore_younger_than(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:io.prometheus.CurationKey)
 private:
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_processor_message_type_name();
  inline void clear_has_processor_message_type_name();
  inline void set_has_processor_message_raw();
  inline void clear_has_processor_message_raw();
  inline void set_has_ignore_younger_than();
  inline void clear_has_ignore_younger_than();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::io::prometheus::Fingerprint* fingerprint_;
  ::std::string* processor_message_type_name_;
  ::std::string* processor_message_raw_;
  ::google::protobuf::int64 ignore_younger_than_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static CurationKey* default_instance_;
};
// -------------------------------------------------------------------

class CurationValue : public ::google::protobuf::Message {
 public:
  CurationValue();
  virtual ~CurationValue();
  
  CurationValue(const CurationValue& from);
  
  inline CurationValue& operator=(const CurationValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurationValue& default_instance();
  
  void Swap(CurationValue* other);
  
  // implements Message ----------------------------------------------
  
  CurationValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurationValue& from);
  void MergeFrom(const CurationValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 last_completion_timestamp = 1;
  inline bool has_last_completion_timestamp() const;
  inline void clear_last_completion_timestamp();
  static const int kLastCompletionTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 last_completion_timestamp() const;
  inline void set_last_completion_timestamp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:io.prometheus.CurationValue)
 private:
  inline void set_has_last_completion_timestamp();
  inline void clear_has_last_completion_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 last_completion_timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static CurationValue* default_instance_;
};
// -------------------------------------------------------------------

class DeletionProcessorDefinition : public ::google::protobuf::Message {
 public:
  DeletionProcessorDefinition();
  virtual ~DeletionProcessorDefinition();
  
  DeletionProcessorDefinition(const DeletionProcessorDefinition& from);
  
  inline DeletionProcessorDefinition& operator=(const DeletionProcessorDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletionProcessorDefinition& default_instance();
  
  void Swap(DeletionProcessorDefinition* other);
  
  // implements Message ----------------------------------------------
  
  DeletionProcessorDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeletionProcessorDefinition& from);
  void MergeFrom(const DeletionProcessorDefinition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:io.prometheus.DeletionProcessorDefinition)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static DeletionProcessorDefinition* default_instance_;
};
// ===================================================================


// ===================================================================

// LabelPair

// optional string name = 1;
inline bool LabelPair::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelPair::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelPair::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelPair::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LabelPair::name() const {
  return *name_;
}
inline void LabelPair::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LabelPair::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LabelPair::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelPair::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LabelPair::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool LabelPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelPair::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& LabelPair::value() const {
  return *value_;
}
inline void LabelPair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void LabelPair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void LabelPair::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelPair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* LabelPair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LabelName

// optional string name = 1;
inline bool LabelName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LabelName::name() const {
  return *name_;
}
inline void LabelName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LabelName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LabelName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LabelName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Metric

// repeated .io.prometheus.LabelPair label_pair = 1;
inline int Metric::label_pair_size() const {
  return label_pair_.size();
}
inline void Metric::clear_label_pair() {
  label_pair_.Clear();
}
inline const ::io::prometheus::LabelPair& Metric::label_pair(int index) const {
  return label_pair_.Get(index);
}
inline ::io::prometheus::LabelPair* Metric::mutable_label_pair(int index) {
  return label_pair_.Mutable(index);
}
inline ::io::prometheus::LabelPair* Metric::add_label_pair() {
  return label_pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >&
Metric::label_pair() const {
  return label_pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >*
Metric::mutable_label_pair() {
  return &label_pair_;
}

// -------------------------------------------------------------------

// Fingerprint

// optional string signature = 1;
inline bool Fingerprint::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fingerprint::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fingerprint::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fingerprint::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Fingerprint::signature() const {
  return *signature_;
}
inline void Fingerprint::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Fingerprint::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Fingerprint::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fingerprint::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Fingerprint::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FingerprintCollection

// repeated .io.prometheus.Fingerprint member = 1;
inline int FingerprintCollection::member_size() const {
  return member_.size();
}
inline void FingerprintCollection::clear_member() {
  member_.Clear();
}
inline const ::io::prometheus::Fingerprint& FingerprintCollection::member(int index) const {
  return member_.Get(index);
}
inline ::io::prometheus::Fingerprint* FingerprintCollection::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::io::prometheus::Fingerprint* FingerprintCollection::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::Fingerprint >&
FingerprintCollection::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::Fingerprint >*
FingerprintCollection::mutable_member() {
  return &member_;
}

// -------------------------------------------------------------------

// LabelSet

// repeated .io.prometheus.LabelPair member = 1;
inline int LabelSet::member_size() const {
  return member_.size();
}
inline void LabelSet::clear_member() {
  member_.Clear();
}
inline const ::io::prometheus::LabelPair& LabelSet::member(int index) const {
  return member_.Get(index);
}
inline ::io::prometheus::LabelPair* LabelSet::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::io::prometheus::LabelPair* LabelSet::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >&
LabelSet::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::LabelPair >*
LabelSet::mutable_member() {
  return &member_;
}

// -------------------------------------------------------------------

// SampleKey

// optional .io.prometheus.Fingerprint fingerprint = 1;
inline bool SampleKey::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleKey::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleKey::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleKey::clear_fingerprint() {
  if (fingerprint_ != NULL) fingerprint_->::io::prometheus::Fingerprint::Clear();
  clear_has_fingerprint();
}
inline const ::io::prometheus::Fingerprint& SampleKey::fingerprint() const {
  return fingerprint_ != NULL ? *fingerprint_ : *default_instance_->fingerprint_;
}
inline ::io::prometheus::Fingerprint* SampleKey::mutable_fingerprint() {
  set_has_fingerprint();
  if (fingerprint_ == NULL) fingerprint_ = new ::io::prometheus::Fingerprint;
  return fingerprint_;
}
inline ::io::prometheus::Fingerprint* SampleKey::release_fingerprint() {
  clear_has_fingerprint();
  ::io::prometheus::Fingerprint* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}

// optional bytes timestamp = 2;
inline bool SampleKey::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleKey::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleKey::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleKey::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& SampleKey::timestamp() const {
  return *timestamp_;
}
inline void SampleKey::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void SampleKey::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void SampleKey::set_timestamp(const void* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SampleKey::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* SampleKey::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sfixed64 last_timestamp = 3;
inline bool SampleKey::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SampleKey::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SampleKey::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SampleKey::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
inline ::google::protobuf::int64 SampleKey::last_timestamp() const {
  return last_timestamp_;
}
inline void SampleKey::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
}

// optional fixed32 sample_count = 4;
inline bool SampleKey::has_sample_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SampleKey::set_has_sample_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SampleKey::clear_has_sample_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SampleKey::clear_sample_count() {
  sample_count_ = 0u;
  clear_has_sample_count();
}
inline ::google::protobuf::uint32 SampleKey::sample_count() const {
  return sample_count_;
}
inline void SampleKey::set_sample_count(::google::protobuf::uint32 value) {
  set_has_sample_count();
  sample_count_ = value;
}

// -------------------------------------------------------------------

// SampleValueSeries_Value

// optional int64 timestamp = 1;
inline bool SampleValueSeries_Value::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleValueSeries_Value::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleValueSeries_Value::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleValueSeries_Value::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 SampleValueSeries_Value::timestamp() const {
  return timestamp_;
}
inline void SampleValueSeries_Value::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional double value = 2;
inline bool SampleValueSeries_Value::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleValueSeries_Value::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleValueSeries_Value::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleValueSeries_Value::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double SampleValueSeries_Value::value() const {
  return value_;
}
inline void SampleValueSeries_Value::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// SampleValueSeries

// repeated .io.prometheus.SampleValueSeries.Value value = 1;
inline int SampleValueSeries::value_size() const {
  return value_.size();
}
inline void SampleValueSeries::clear_value() {
  value_.Clear();
}
inline const ::io::prometheus::SampleValueSeries_Value& SampleValueSeries::value(int index) const {
  return value_.Get(index);
}
inline ::io::prometheus::SampleValueSeries_Value* SampleValueSeries::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::io::prometheus::SampleValueSeries_Value* SampleValueSeries::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::io::prometheus::SampleValueSeries_Value >&
SampleValueSeries::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::io::prometheus::SampleValueSeries_Value >*
SampleValueSeries::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// MembershipIndexValue

// -------------------------------------------------------------------

// MetricHighWatermark

// optional int64 timestamp = 1;
inline bool MetricHighWatermark::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricHighWatermark::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetricHighWatermark::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetricHighWatermark::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 MetricHighWatermark::timestamp() const {
  return timestamp_;
}
inline void MetricHighWatermark::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// CompactionProcessorDefinition

// optional uint32 minimum_group_size = 1;
inline bool CompactionProcessorDefinition::has_minimum_group_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompactionProcessorDefinition::set_has_minimum_group_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompactionProcessorDefinition::clear_has_minimum_group_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompactionProcessorDefinition::clear_minimum_group_size() {
  minimum_group_size_ = 0u;
  clear_has_minimum_group_size();
}
inline ::google::protobuf::uint32 CompactionProcessorDefinition::minimum_group_size() const {
  return minimum_group_size_;
}
inline void CompactionProcessorDefinition::set_minimum_group_size(::google::protobuf::uint32 value) {
  set_has_minimum_group_size();
  minimum_group_size_ = value;
}

// -------------------------------------------------------------------

// CurationKey

// optional .io.prometheus.Fingerprint fingerprint = 1;
inline bool CurationKey::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurationKey::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurationKey::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurationKey::clear_fingerprint() {
  if (fingerprint_ != NULL) fingerprint_->::io::prometheus::Fingerprint::Clear();
  clear_has_fingerprint();
}
inline const ::io::prometheus::Fingerprint& CurationKey::fingerprint() const {
  return fingerprint_ != NULL ? *fingerprint_ : *default_instance_->fingerprint_;
}
inline ::io::prometheus::Fingerprint* CurationKey::mutable_fingerprint() {
  set_has_fingerprint();
  if (fingerprint_ == NULL) fingerprint_ = new ::io::prometheus::Fingerprint;
  return fingerprint_;
}
inline ::io::prometheus::Fingerprint* CurationKey::release_fingerprint() {
  clear_has_fingerprint();
  ::io::prometheus::Fingerprint* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}

// optional string processor_message_type_name = 2;
inline bool CurationKey::has_processor_message_type_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurationKey::set_has_processor_message_type_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurationKey::clear_has_processor_message_type_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurationKey::clear_processor_message_type_name() {
  if (processor_message_type_name_ != &::google::protobuf::internal::kEmptyString) {
    processor_message_type_name_->clear();
  }
  clear_has_processor_message_type_name();
}
inline const ::std::string& CurationKey::processor_message_type_name() const {
  return *processor_message_type_name_;
}
inline void CurationKey::set_processor_message_type_name(const ::std::string& value) {
  set_has_processor_message_type_name();
  if (processor_message_type_name_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_type_name_ = new ::std::string;
  }
  processor_message_type_name_->assign(value);
}
inline void CurationKey::set_processor_message_type_name(const char* value) {
  set_has_processor_message_type_name();
  if (processor_message_type_name_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_type_name_ = new ::std::string;
  }
  processor_message_type_name_->assign(value);
}
inline void CurationKey::set_processor_message_type_name(const char* value, size_t size) {
  set_has_processor_message_type_name();
  if (processor_message_type_name_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_type_name_ = new ::std::string;
  }
  processor_message_type_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CurationKey::mutable_processor_message_type_name() {
  set_has_processor_message_type_name();
  if (processor_message_type_name_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_type_name_ = new ::std::string;
  }
  return processor_message_type_name_;
}
inline ::std::string* CurationKey::release_processor_message_type_name() {
  clear_has_processor_message_type_name();
  if (processor_message_type_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processor_message_type_name_;
    processor_message_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes processor_message_raw = 3;
inline bool CurationKey::has_processor_message_raw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurationKey::set_has_processor_message_raw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurationKey::clear_has_processor_message_raw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurationKey::clear_processor_message_raw() {
  if (processor_message_raw_ != &::google::protobuf::internal::kEmptyString) {
    processor_message_raw_->clear();
  }
  clear_has_processor_message_raw();
}
inline const ::std::string& CurationKey::processor_message_raw() const {
  return *processor_message_raw_;
}
inline void CurationKey::set_processor_message_raw(const ::std::string& value) {
  set_has_processor_message_raw();
  if (processor_message_raw_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_raw_ = new ::std::string;
  }
  processor_message_raw_->assign(value);
}
inline void CurationKey::set_processor_message_raw(const char* value) {
  set_has_processor_message_raw();
  if (processor_message_raw_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_raw_ = new ::std::string;
  }
  processor_message_raw_->assign(value);
}
inline void CurationKey::set_processor_message_raw(const void* value, size_t size) {
  set_has_processor_message_raw();
  if (processor_message_raw_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_raw_ = new ::std::string;
  }
  processor_message_raw_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CurationKey::mutable_processor_message_raw() {
  set_has_processor_message_raw();
  if (processor_message_raw_ == &::google::protobuf::internal::kEmptyString) {
    processor_message_raw_ = new ::std::string;
  }
  return processor_message_raw_;
}
inline ::std::string* CurationKey::release_processor_message_raw() {
  clear_has_processor_message_raw();
  if (processor_message_raw_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = processor_message_raw_;
    processor_message_raw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 ignore_younger_than = 4;
inline bool CurationKey::has_ignore_younger_than() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CurationKey::set_has_ignore_younger_than() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CurationKey::clear_has_ignore_younger_than() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CurationKey::clear_ignore_younger_than() {
  ignore_younger_than_ = GOOGLE_LONGLONG(0);
  clear_has_ignore_younger_than();
}
inline ::google::protobuf::int64 CurationKey::ignore_younger_than() const {
  return ignore_younger_than_;
}
inline void CurationKey::set_ignore_younger_than(::google::protobuf::int64 value) {
  set_has_ignore_younger_than();
  ignore_younger_than_ = value;
}

// -------------------------------------------------------------------

// CurationValue

// optional int64 last_completion_timestamp = 1;
inline bool CurationValue::has_last_completion_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurationValue::set_has_last_completion_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurationValue::clear_has_last_completion_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurationValue::clear_last_completion_timestamp() {
  last_completion_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_completion_timestamp();
}
inline ::google::protobuf::int64 CurationValue::last_completion_timestamp() const {
  return last_completion_timestamp_;
}
inline void CurationValue::set_last_completion_timestamp(::google::protobuf::int64 value) {
  set_has_last_completion_timestamp();
  last_completion_timestamp_ = value;
}

// -------------------------------------------------------------------

// DeletionProcessorDefinition


// @@protoc_insertion_point(namespace_scope)

}  // namespace prometheus
}  // namespace io

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
