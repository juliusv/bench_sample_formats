// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace io {
namespace prometheus {

namespace {

const ::google::protobuf::Descriptor* LabelPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fingerprint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fingerprint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleValueSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleValueSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleValueSeries_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleValueSeries_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* MembershipIndexValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MembershipIndexValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricHighWatermark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricHighWatermark_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactionProcessorDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactionProcessorDefinition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurationKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurationKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurationValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurationValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletionProcessorDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletionProcessorDefinition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  LabelPair_descriptor_ = file->message_type(0);
  static const int LabelPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, value_),
  };
  LabelPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelPair_descriptor_,
      LabelPair::default_instance_,
      LabelPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelPair));
  LabelName_descriptor_ = file->message_type(1);
  static const int LabelName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelName, name_),
  };
  LabelName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelName_descriptor_,
      LabelName::default_instance_,
      LabelName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelName));
  Metric_descriptor_ = file->message_type(2);
  static const int Metric_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, label_pair_),
  };
  Metric_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metric_descriptor_,
      Metric::default_instance_,
      Metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metric));
  Fingerprint_descriptor_ = file->message_type(3);
  static const int Fingerprint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fingerprint, signature_),
  };
  Fingerprint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fingerprint_descriptor_,
      Fingerprint::default_instance_,
      Fingerprint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fingerprint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fingerprint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fingerprint));
  FingerprintCollection_descriptor_ = file->message_type(4);
  static const int FingerprintCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCollection, member_),
  };
  FingerprintCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FingerprintCollection_descriptor_,
      FingerprintCollection::default_instance_,
      FingerprintCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FingerprintCollection));
  LabelSet_descriptor_ = file->message_type(5);
  static const int LabelSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSet, member_),
  };
  LabelSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelSet_descriptor_,
      LabelSet::default_instance_,
      LabelSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelSet));
  SampleKey_descriptor_ = file->message_type(6);
  static const int SampleKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleKey, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleKey, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleKey, last_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleKey, sample_count_),
  };
  SampleKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleKey_descriptor_,
      SampleKey::default_instance_,
      SampleKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleKey));
  SampleValueSeries_descriptor_ = file->message_type(7);
  static const int SampleValueSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleValueSeries, value_),
  };
  SampleValueSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleValueSeries_descriptor_,
      SampleValueSeries::default_instance_,
      SampleValueSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleValueSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleValueSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleValueSeries));
  SampleValueSeries_Value_descriptor_ = SampleValueSeries_descriptor_->nested_type(0);
  static const int SampleValueSeries_Value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleValueSeries_Value, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleValueSeries_Value, value_),
  };
  SampleValueSeries_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleValueSeries_Value_descriptor_,
      SampleValueSeries_Value::default_instance_,
      SampleValueSeries_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleValueSeries_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleValueSeries_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleValueSeries_Value));
  MembershipIndexValue_descriptor_ = file->message_type(8);
  static const int MembershipIndexValue_offsets_[1] = {
  };
  MembershipIndexValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MembershipIndexValue_descriptor_,
      MembershipIndexValue::default_instance_,
      MembershipIndexValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MembershipIndexValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MembershipIndexValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MembershipIndexValue));
  MetricHighWatermark_descriptor_ = file->message_type(9);
  static const int MetricHighWatermark_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricHighWatermark, timestamp_),
  };
  MetricHighWatermark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricHighWatermark_descriptor_,
      MetricHighWatermark::default_instance_,
      MetricHighWatermark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricHighWatermark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricHighWatermark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricHighWatermark));
  CompactionProcessorDefinition_descriptor_ = file->message_type(10);
  static const int CompactionProcessorDefinition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionProcessorDefinition, minimum_group_size_),
  };
  CompactionProcessorDefinition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompactionProcessorDefinition_descriptor_,
      CompactionProcessorDefinition::default_instance_,
      CompactionProcessorDefinition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionProcessorDefinition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionProcessorDefinition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompactionProcessorDefinition));
  CurationKey_descriptor_ = file->message_type(11);
  static const int CurationKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationKey, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationKey, processor_message_type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationKey, processor_message_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationKey, ignore_younger_than_),
  };
  CurationKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurationKey_descriptor_,
      CurationKey::default_instance_,
      CurationKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurationKey));
  CurationValue_descriptor_ = file->message_type(12);
  static const int CurationValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationValue, last_completion_timestamp_),
  };
  CurationValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurationValue_descriptor_,
      CurationValue::default_instance_,
      CurationValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurationValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurationValue));
  DeletionProcessorDefinition_descriptor_ = file->message_type(13);
  static const int DeletionProcessorDefinition_offsets_[1] = {
  };
  DeletionProcessorDefinition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletionProcessorDefinition_descriptor_,
      DeletionProcessorDefinition::default_instance_,
      DeletionProcessorDefinition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionProcessorDefinition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionProcessorDefinition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletionProcessorDefinition));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelPair_descriptor_, &LabelPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelName_descriptor_, &LabelName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metric_descriptor_, &Metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fingerprint_descriptor_, &Fingerprint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FingerprintCollection_descriptor_, &FingerprintCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelSet_descriptor_, &LabelSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleKey_descriptor_, &SampleKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleValueSeries_descriptor_, &SampleValueSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleValueSeries_Value_descriptor_, &SampleValueSeries_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MembershipIndexValue_descriptor_, &MembershipIndexValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricHighWatermark_descriptor_, &MetricHighWatermark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompactionProcessorDefinition_descriptor_, &CompactionProcessorDefinition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurationKey_descriptor_, &CurationKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurationValue_descriptor_, &CurationValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletionProcessorDefinition_descriptor_, &DeletionProcessorDefinition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete LabelPair::default_instance_;
  delete LabelPair_reflection_;
  delete LabelName::default_instance_;
  delete LabelName_reflection_;
  delete Metric::default_instance_;
  delete Metric_reflection_;
  delete Fingerprint::default_instance_;
  delete Fingerprint_reflection_;
  delete FingerprintCollection::default_instance_;
  delete FingerprintCollection_reflection_;
  delete LabelSet::default_instance_;
  delete LabelSet_reflection_;
  delete SampleKey::default_instance_;
  delete SampleKey_reflection_;
  delete SampleValueSeries::default_instance_;
  delete SampleValueSeries_reflection_;
  delete SampleValueSeries_Value::default_instance_;
  delete SampleValueSeries_Value_reflection_;
  delete MembershipIndexValue::default_instance_;
  delete MembershipIndexValue_reflection_;
  delete MetricHighWatermark::default_instance_;
  delete MetricHighWatermark_reflection_;
  delete CompactionProcessorDefinition::default_instance_;
  delete CompactionProcessorDefinition_reflection_;
  delete CurationKey::default_instance_;
  delete CurationKey_reflection_;
  delete CurationValue::default_instance_;
  delete CurationValue_reflection_;
  delete DeletionProcessorDefinition::default_instance_;
  delete DeletionProcessorDefinition_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\rio.prometheus\"(\n\tLabelPair"
    "\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\031\n\tLabelNa"
    "me\022\014\n\004name\030\001 \001(\t\"6\n\006Metric\022,\n\nlabel_pair"
    "\030\001 \003(\0132\030.io.prometheus.LabelPair\" \n\013Fing"
    "erprint\022\021\n\tsignature\030\001 \001(\t\"C\n\025Fingerprin"
    "tCollection\022*\n\006member\030\001 \003(\0132\032.io.prometh"
    "eus.Fingerprint\"4\n\010LabelSet\022(\n\006member\030\001 "
    "\003(\0132\030.io.prometheus.LabelPair\"}\n\tSampleK"
    "ey\022/\n\013fingerprint\030\001 \001(\0132\032.io.prometheus."
    "Fingerprint\022\021\n\ttimestamp\030\002 \001(\014\022\026\n\016last_t"
    "imestamp\030\003 \001(\020\022\024\n\014sample_count\030\004 \001(\007\"u\n\021"
    "SampleValueSeries\0225\n\005value\030\001 \003(\0132&.io.pr"
    "ometheus.SampleValueSeries.Value\032)\n\005Valu"
    "e\022\021\n\ttimestamp\030\001 \001(\003\022\r\n\005value\030\002 \001(\001\"\026\n\024M"
    "embershipIndexValue\"(\n\023MetricHighWaterma"
    "rk\022\021\n\ttimestamp\030\001 \001(\003\";\n\035CompactionProce"
    "ssorDefinition\022\032\n\022minimum_group_size\030\001 \001"
    "(\r\"\237\001\n\013CurationKey\022/\n\013fingerprint\030\001 \001(\0132"
    "\032.io.prometheus.Fingerprint\022#\n\033processor"
    "_message_type_name\030\002 \001(\t\022\035\n\025processor_me"
    "ssage_raw\030\003 \001(\014\022\033\n\023ignore_younger_than\030\004"
    " \001(\003\"2\n\rCurationValue\022!\n\031last_completion"
    "_timestamp\030\001 \001(\003\"\035\n\033DeletionProcessorDef"
    "initionB\002H\001", 931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  LabelPair::default_instance_ = new LabelPair();
  LabelName::default_instance_ = new LabelName();
  Metric::default_instance_ = new Metric();
  Fingerprint::default_instance_ = new Fingerprint();
  FingerprintCollection::default_instance_ = new FingerprintCollection();
  LabelSet::default_instance_ = new LabelSet();
  SampleKey::default_instance_ = new SampleKey();
  SampleValueSeries::default_instance_ = new SampleValueSeries();
  SampleValueSeries_Value::default_instance_ = new SampleValueSeries_Value();
  MembershipIndexValue::default_instance_ = new MembershipIndexValue();
  MetricHighWatermark::default_instance_ = new MetricHighWatermark();
  CompactionProcessorDefinition::default_instance_ = new CompactionProcessorDefinition();
  CurationKey::default_instance_ = new CurationKey();
  CurationValue::default_instance_ = new CurationValue();
  DeletionProcessorDefinition::default_instance_ = new DeletionProcessorDefinition();
  LabelPair::default_instance_->InitAsDefaultInstance();
  LabelName::default_instance_->InitAsDefaultInstance();
  Metric::default_instance_->InitAsDefaultInstance();
  Fingerprint::default_instance_->InitAsDefaultInstance();
  FingerprintCollection::default_instance_->InitAsDefaultInstance();
  LabelSet::default_instance_->InitAsDefaultInstance();
  SampleKey::default_instance_->InitAsDefaultInstance();
  SampleValueSeries::default_instance_->InitAsDefaultInstance();
  SampleValueSeries_Value::default_instance_->InitAsDefaultInstance();
  MembershipIndexValue::default_instance_->InitAsDefaultInstance();
  MetricHighWatermark::default_instance_->InitAsDefaultInstance();
  CompactionProcessorDefinition::default_instance_->InitAsDefaultInstance();
  CurationKey::default_instance_->InitAsDefaultInstance();
  CurationValue::default_instance_->InitAsDefaultInstance();
  DeletionProcessorDefinition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LabelPair::kNameFieldNumber;
const int LabelPair::kValueFieldNumber;
#endif  // !_MSC_VER

LabelPair::LabelPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelPair::InitAsDefaultInstance() {
}

LabelPair::LabelPair(const LabelPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelPair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelPair::~LabelPair() {
  SharedDtor();
}

void LabelPair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void LabelPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelPair_descriptor_;
}

const LabelPair& LabelPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

LabelPair* LabelPair::default_instance_ = NULL;

LabelPair* LabelPair::New() const {
  return new LabelPair;
}

void LabelPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelPair::MergeFrom(const LabelPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelPair::CopyFrom(const LabelPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelPair::IsInitialized() const {
  
  return true;
}

void LabelPair::Swap(LabelPair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelPair_descriptor_;
  metadata.reflection = LabelPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LabelName::kNameFieldNumber;
#endif  // !_MSC_VER

LabelName::LabelName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelName::InitAsDefaultInstance() {
}

LabelName::LabelName(const LabelName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelName::~LabelName() {
  SharedDtor();
}

void LabelName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LabelName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelName_descriptor_;
}

const LabelName& LabelName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

LabelName* LabelName::default_instance_ = NULL;

LabelName* LabelName::New() const {
  return new LabelName;
}

void LabelName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelName::MergeFrom(const LabelName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelName::CopyFrom(const LabelName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelName::IsInitialized() const {
  
  return true;
}

void LabelName::Swap(LabelName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelName_descriptor_;
  metadata.reflection = LabelName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Metric::kLabelPairFieldNumber;
#endif  // !_MSC_VER

Metric::Metric()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metric::InitAsDefaultInstance() {
}

Metric::Metric(const Metric& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metric::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metric::~Metric() {
  SharedDtor();
}

void Metric::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_descriptor_;
}

const Metric& Metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Metric* Metric::default_instance_ = NULL;

Metric* Metric::New() const {
  return new Metric;
}

void Metric::Clear() {
  label_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.prometheus.LabelPair label_pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_label_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_label_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .io.prometheus.LabelPair label_pair = 1;
  for (int i = 0; i < this->label_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->label_pair(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metric::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .io.prometheus.LabelPair label_pair = 1;
  for (int i = 0; i < this->label_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->label_pair(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metric::ByteSize() const {
  int total_size = 0;
  
  // repeated .io.prometheus.LabelPair label_pair = 1;
  total_size += 1 * this->label_pair_size();
  for (int i = 0; i < this->label_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->label_pair(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metric* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metric*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_pair_.MergeFrom(from.label_pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  
  return true;
}

void Metric::Swap(Metric* other) {
  if (other != this) {
    label_pair_.Swap(&other->label_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metric_descriptor_;
  metadata.reflection = Metric_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fingerprint::kSignatureFieldNumber;
#endif  // !_MSC_VER

Fingerprint::Fingerprint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fingerprint::InitAsDefaultInstance() {
}

Fingerprint::Fingerprint(const Fingerprint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fingerprint::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fingerprint::~Fingerprint() {
  SharedDtor();
}

void Fingerprint::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void Fingerprint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fingerprint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fingerprint_descriptor_;
}

const Fingerprint& Fingerprint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Fingerprint* Fingerprint::default_instance_ = NULL;

Fingerprint* Fingerprint::New() const {
  return new Fingerprint;
}

void Fingerprint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fingerprint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fingerprint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fingerprint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fingerprint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fingerprint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fingerprint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fingerprint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fingerprint::MergeFrom(const Fingerprint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fingerprint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fingerprint::CopyFrom(const Fingerprint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint::IsInitialized() const {
  
  return true;
}

void Fingerprint::Swap(Fingerprint* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fingerprint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fingerprint_descriptor_;
  metadata.reflection = Fingerprint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FingerprintCollection::kMemberFieldNumber;
#endif  // !_MSC_VER

FingerprintCollection::FingerprintCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FingerprintCollection::InitAsDefaultInstance() {
}

FingerprintCollection::FingerprintCollection(const FingerprintCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FingerprintCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FingerprintCollection::~FingerprintCollection() {
  SharedDtor();
}

void FingerprintCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FingerprintCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintCollection_descriptor_;
}

const FingerprintCollection& FingerprintCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

FingerprintCollection* FingerprintCollection::default_instance_ = NULL;

FingerprintCollection* FingerprintCollection::New() const {
  return new FingerprintCollection;
}

void FingerprintCollection::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FingerprintCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.prometheus.Fingerprint member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FingerprintCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .io.prometheus.Fingerprint member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FingerprintCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .io.prometheus.Fingerprint member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FingerprintCollection::ByteSize() const {
  int total_size = 0;
  
  // repeated .io.prometheus.Fingerprint member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FingerprintCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FingerprintCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FingerprintCollection::MergeFrom(const FingerprintCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FingerprintCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintCollection::CopyFrom(const FingerprintCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintCollection::IsInitialized() const {
  
  return true;
}

void FingerprintCollection::Swap(FingerprintCollection* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FingerprintCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintCollection_descriptor_;
  metadata.reflection = FingerprintCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LabelSet::kMemberFieldNumber;
#endif  // !_MSC_VER

LabelSet::LabelSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelSet::InitAsDefaultInstance() {
}

LabelSet::LabelSet(const LabelSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSet::~LabelSet() {
  SharedDtor();
}

void LabelSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSet_descriptor_;
}

const LabelSet& LabelSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

LabelSet* LabelSet::default_instance_ = NULL;

LabelSet* LabelSet::New() const {
  return new LabelSet;
}

void LabelSet::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.prometheus.LabelPair member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .io.prometheus.LabelPair member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .io.prometheus.LabelPair member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelSet::ByteSize() const {
  int total_size = 0;
  
  // repeated .io.prometheus.LabelPair member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelSet::MergeFrom(const LabelSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSet::CopyFrom(const LabelSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSet::IsInitialized() const {
  
  return true;
}

void LabelSet::Swap(LabelSet* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSet_descriptor_;
  metadata.reflection = LabelSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleKey::kFingerprintFieldNumber;
const int SampleKey::kTimestampFieldNumber;
const int SampleKey::kLastTimestampFieldNumber;
const int SampleKey::kSampleCountFieldNumber;
#endif  // !_MSC_VER

SampleKey::SampleKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SampleKey::InitAsDefaultInstance() {
  fingerprint_ = const_cast< ::io::prometheus::Fingerprint*>(&::io::prometheus::Fingerprint::default_instance());
}

SampleKey::SampleKey(const SampleKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SampleKey::SharedCtor() {
  _cached_size_ = 0;
  fingerprint_ = NULL;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_timestamp_ = GOOGLE_LONGLONG(0);
  sample_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleKey::~SampleKey() {
  SharedDtor();
}

void SampleKey::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete fingerprint_;
  }
}

void SampleKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleKey_descriptor_;
}

const SampleKey& SampleKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

SampleKey* SampleKey::default_instance_ = NULL;

SampleKey* SampleKey::New() const {
  return new SampleKey;
}

void SampleKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fingerprint()) {
      if (fingerprint_ != NULL) fingerprint_->::io::prometheus::Fingerprint::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    last_timestamp_ = GOOGLE_LONGLONG(0);
    sample_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .io.prometheus.Fingerprint fingerprint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fingerprint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }
      
      // optional bytes timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_timestamp;
        break;
      }
      
      // optional sfixed64 last_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_timestamp_)));
          set_has_last_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sample_count;
        break;
      }
      
      // optional fixed32 sample_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sample_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sample_count_)));
          set_has_sample_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SampleKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .io.prometheus.Fingerprint fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fingerprint(), output);
  }
  
  // optional bytes timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->timestamp(), output);
  }
  
  // optional sfixed64 last_timestamp = 3;
  if (has_last_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->last_timestamp(), output);
  }
  
  // optional fixed32 sample_count = 4;
  if (has_sample_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->sample_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SampleKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .io.prometheus.Fingerprint fingerprint = 1;
  if (has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fingerprint(), target);
  }
  
  // optional bytes timestamp = 2;
  if (has_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->timestamp(), target);
  }
  
  // optional sfixed64 last_timestamp = 3;
  if (has_last_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->last_timestamp(), target);
  }
  
  // optional fixed32 sample_count = 4;
  if (has_sample_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->sample_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SampleKey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .io.prometheus.Fingerprint fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fingerprint());
    }
    
    // optional bytes timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp());
    }
    
    // optional sfixed64 last_timestamp = 3;
    if (has_last_timestamp()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 sample_count = 4;
    if (has_sample_count()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleKey::MergeFrom(const SampleKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      mutable_fingerprint()->::io::prometheus::Fingerprint::MergeFrom(from.fingerprint());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_last_timestamp()) {
      set_last_timestamp(from.last_timestamp());
    }
    if (from.has_sample_count()) {
      set_sample_count(from.sample_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleKey::CopyFrom(const SampleKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleKey::IsInitialized() const {
  
  return true;
}

void SampleKey::Swap(SampleKey* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(last_timestamp_, other->last_timestamp_);
    std::swap(sample_count_, other->sample_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleKey_descriptor_;
  metadata.reflection = SampleKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleValueSeries_Value::kTimestampFieldNumber;
const int SampleValueSeries_Value::kValueFieldNumber;
#endif  // !_MSC_VER

SampleValueSeries_Value::SampleValueSeries_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SampleValueSeries_Value::InitAsDefaultInstance() {
}

SampleValueSeries_Value::SampleValueSeries_Value(const SampleValueSeries_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SampleValueSeries_Value::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleValueSeries_Value::~SampleValueSeries_Value() {
  SharedDtor();
}

void SampleValueSeries_Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SampleValueSeries_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleValueSeries_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleValueSeries_Value_descriptor_;
}

const SampleValueSeries_Value& SampleValueSeries_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

SampleValueSeries_Value* SampleValueSeries_Value::default_instance_ = NULL;

SampleValueSeries_Value* SampleValueSeries_Value::New() const {
  return new SampleValueSeries_Value;
}

void SampleValueSeries_Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleValueSeries_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }
      
      // optional double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SampleValueSeries_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }
  
  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SampleValueSeries_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SampleValueSeries_Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleValueSeries_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleValueSeries_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleValueSeries_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleValueSeries_Value::MergeFrom(const SampleValueSeries_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleValueSeries_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleValueSeries_Value::CopyFrom(const SampleValueSeries_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleValueSeries_Value::IsInitialized() const {
  
  return true;
}

void SampleValueSeries_Value::Swap(SampleValueSeries_Value* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleValueSeries_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleValueSeries_Value_descriptor_;
  metadata.reflection = SampleValueSeries_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SampleValueSeries::kValueFieldNumber;
#endif  // !_MSC_VER

SampleValueSeries::SampleValueSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SampleValueSeries::InitAsDefaultInstance() {
}

SampleValueSeries::SampleValueSeries(const SampleValueSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SampleValueSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleValueSeries::~SampleValueSeries() {
  SharedDtor();
}

void SampleValueSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SampleValueSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleValueSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleValueSeries_descriptor_;
}

const SampleValueSeries& SampleValueSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

SampleValueSeries* SampleValueSeries::default_instance_ = NULL;

SampleValueSeries* SampleValueSeries::New() const {
  return new SampleValueSeries;
}

void SampleValueSeries::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleValueSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .io.prometheus.SampleValueSeries.Value value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SampleValueSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .io.prometheus.SampleValueSeries.Value value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SampleValueSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .io.prometheus.SampleValueSeries.Value value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SampleValueSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .io.prometheus.SampleValueSeries.Value value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleValueSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleValueSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleValueSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleValueSeries::MergeFrom(const SampleValueSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleValueSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleValueSeries::CopyFrom(const SampleValueSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleValueSeries::IsInitialized() const {
  
  return true;
}

void SampleValueSeries::Swap(SampleValueSeries* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleValueSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleValueSeries_descriptor_;
  metadata.reflection = SampleValueSeries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MembershipIndexValue::MembershipIndexValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MembershipIndexValue::InitAsDefaultInstance() {
}

MembershipIndexValue::MembershipIndexValue(const MembershipIndexValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MembershipIndexValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MembershipIndexValue::~MembershipIndexValue() {
  SharedDtor();
}

void MembershipIndexValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MembershipIndexValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MembershipIndexValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MembershipIndexValue_descriptor_;
}

const MembershipIndexValue& MembershipIndexValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

MembershipIndexValue* MembershipIndexValue::default_instance_ = NULL;

MembershipIndexValue* MembershipIndexValue::New() const {
  return new MembershipIndexValue;
}

void MembershipIndexValue::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MembershipIndexValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MembershipIndexValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MembershipIndexValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MembershipIndexValue::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MembershipIndexValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MembershipIndexValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MembershipIndexValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MembershipIndexValue::MergeFrom(const MembershipIndexValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MembershipIndexValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MembershipIndexValue::CopyFrom(const MembershipIndexValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MembershipIndexValue::IsInitialized() const {
  
  return true;
}

void MembershipIndexValue::Swap(MembershipIndexValue* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MembershipIndexValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MembershipIndexValue_descriptor_;
  metadata.reflection = MembershipIndexValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricHighWatermark::kTimestampFieldNumber;
#endif  // !_MSC_VER

MetricHighWatermark::MetricHighWatermark()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetricHighWatermark::InitAsDefaultInstance() {
}

MetricHighWatermark::MetricHighWatermark(const MetricHighWatermark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetricHighWatermark::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricHighWatermark::~MetricHighWatermark() {
  SharedDtor();
}

void MetricHighWatermark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetricHighWatermark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricHighWatermark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricHighWatermark_descriptor_;
}

const MetricHighWatermark& MetricHighWatermark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

MetricHighWatermark* MetricHighWatermark::default_instance_ = NULL;

MetricHighWatermark* MetricHighWatermark::New() const {
  return new MetricHighWatermark;
}

void MetricHighWatermark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricHighWatermark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetricHighWatermark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetricHighWatermark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetricHighWatermark::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricHighWatermark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricHighWatermark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricHighWatermark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricHighWatermark::MergeFrom(const MetricHighWatermark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricHighWatermark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricHighWatermark::CopyFrom(const MetricHighWatermark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricHighWatermark::IsInitialized() const {
  
  return true;
}

void MetricHighWatermark::Swap(MetricHighWatermark* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricHighWatermark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricHighWatermark_descriptor_;
  metadata.reflection = MetricHighWatermark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompactionProcessorDefinition::kMinimumGroupSizeFieldNumber;
#endif  // !_MSC_VER

CompactionProcessorDefinition::CompactionProcessorDefinition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompactionProcessorDefinition::InitAsDefaultInstance() {
}

CompactionProcessorDefinition::CompactionProcessorDefinition(const CompactionProcessorDefinition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompactionProcessorDefinition::SharedCtor() {
  _cached_size_ = 0;
  minimum_group_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompactionProcessorDefinition::~CompactionProcessorDefinition() {
  SharedDtor();
}

void CompactionProcessorDefinition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompactionProcessorDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactionProcessorDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactionProcessorDefinition_descriptor_;
}

const CompactionProcessorDefinition& CompactionProcessorDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

CompactionProcessorDefinition* CompactionProcessorDefinition::default_instance_ = NULL;

CompactionProcessorDefinition* CompactionProcessorDefinition::New() const {
  return new CompactionProcessorDefinition;
}

void CompactionProcessorDefinition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minimum_group_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompactionProcessorDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 minimum_group_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimum_group_size_)));
          set_has_minimum_group_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompactionProcessorDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 minimum_group_size = 1;
  if (has_minimum_group_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->minimum_group_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompactionProcessorDefinition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 minimum_group_size = 1;
  if (has_minimum_group_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->minimum_group_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompactionProcessorDefinition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 minimum_group_size = 1;
    if (has_minimum_group_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minimum_group_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactionProcessorDefinition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompactionProcessorDefinition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompactionProcessorDefinition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompactionProcessorDefinition::MergeFrom(const CompactionProcessorDefinition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minimum_group_size()) {
      set_minimum_group_size(from.minimum_group_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompactionProcessorDefinition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionProcessorDefinition::CopyFrom(const CompactionProcessorDefinition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionProcessorDefinition::IsInitialized() const {
  
  return true;
}

void CompactionProcessorDefinition::Swap(CompactionProcessorDefinition* other) {
  if (other != this) {
    std::swap(minimum_group_size_, other->minimum_group_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompactionProcessorDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactionProcessorDefinition_descriptor_;
  metadata.reflection = CompactionProcessorDefinition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurationKey::kFingerprintFieldNumber;
const int CurationKey::kProcessorMessageTypeNameFieldNumber;
const int CurationKey::kProcessorMessageRawFieldNumber;
const int CurationKey::kIgnoreYoungerThanFieldNumber;
#endif  // !_MSC_VER

CurationKey::CurationKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurationKey::InitAsDefaultInstance() {
  fingerprint_ = const_cast< ::io::prometheus::Fingerprint*>(&::io::prometheus::Fingerprint::default_instance());
}

CurationKey::CurationKey(const CurationKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurationKey::SharedCtor() {
  _cached_size_ = 0;
  fingerprint_ = NULL;
  processor_message_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processor_message_raw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ignore_younger_than_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurationKey::~CurationKey() {
  SharedDtor();
}

void CurationKey::SharedDtor() {
  if (processor_message_type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete processor_message_type_name_;
  }
  if (processor_message_raw_ != &::google::protobuf::internal::kEmptyString) {
    delete processor_message_raw_;
  }
  if (this != default_instance_) {
    delete fingerprint_;
  }
}

void CurationKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurationKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurationKey_descriptor_;
}

const CurationKey& CurationKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

CurationKey* CurationKey::default_instance_ = NULL;

CurationKey* CurationKey::New() const {
  return new CurationKey;
}

void CurationKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fingerprint()) {
      if (fingerprint_ != NULL) fingerprint_->::io::prometheus::Fingerprint::Clear();
    }
    if (has_processor_message_type_name()) {
      if (processor_message_type_name_ != &::google::protobuf::internal::kEmptyString) {
        processor_message_type_name_->clear();
      }
    }
    if (has_processor_message_raw()) {
      if (processor_message_raw_ != &::google::protobuf::internal::kEmptyString) {
        processor_message_raw_->clear();
      }
    }
    ignore_younger_than_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurationKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .io.prometheus.Fingerprint fingerprint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fingerprint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_processor_message_type_name;
        break;
      }
      
      // optional string processor_message_type_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor_message_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processor_message_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processor_message_type_name().data(), this->processor_message_type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processor_message_raw;
        break;
      }
      
      // optional bytes processor_message_raw = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processor_message_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_processor_message_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ignore_younger_than;
        break;
      }
      
      // optional int64 ignore_younger_than = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_younger_than:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ignore_younger_than_)));
          set_has_ignore_younger_than();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurationKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .io.prometheus.Fingerprint fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fingerprint(), output);
  }
  
  // optional string processor_message_type_name = 2;
  if (has_processor_message_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_message_type_name().data(), this->processor_message_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->processor_message_type_name(), output);
  }
  
  // optional bytes processor_message_raw = 3;
  if (has_processor_message_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->processor_message_raw(), output);
  }
  
  // optional int64 ignore_younger_than = 4;
  if (has_ignore_younger_than()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ignore_younger_than(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurationKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .io.prometheus.Fingerprint fingerprint = 1;
  if (has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fingerprint(), target);
  }
  
  // optional string processor_message_type_name = 2;
  if (has_processor_message_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processor_message_type_name().data(), this->processor_message_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->processor_message_type_name(), target);
  }
  
  // optional bytes processor_message_raw = 3;
  if (has_processor_message_raw()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->processor_message_raw(), target);
  }
  
  // optional int64 ignore_younger_than = 4;
  if (has_ignore_younger_than()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ignore_younger_than(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurationKey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .io.prometheus.Fingerprint fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fingerprint());
    }
    
    // optional string processor_message_type_name = 2;
    if (has_processor_message_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processor_message_type_name());
    }
    
    // optional bytes processor_message_raw = 3;
    if (has_processor_message_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->processor_message_raw());
    }
    
    // optional int64 ignore_younger_than = 4;
    if (has_ignore_younger_than()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ignore_younger_than());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurationKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurationKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurationKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurationKey::MergeFrom(const CurationKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      mutable_fingerprint()->::io::prometheus::Fingerprint::MergeFrom(from.fingerprint());
    }
    if (from.has_processor_message_type_name()) {
      set_processor_message_type_name(from.processor_message_type_name());
    }
    if (from.has_processor_message_raw()) {
      set_processor_message_raw(from.processor_message_raw());
    }
    if (from.has_ignore_younger_than()) {
      set_ignore_younger_than(from.ignore_younger_than());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurationKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurationKey::CopyFrom(const CurationKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurationKey::IsInitialized() const {
  
  return true;
}

void CurationKey::Swap(CurationKey* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(processor_message_type_name_, other->processor_message_type_name_);
    std::swap(processor_message_raw_, other->processor_message_raw_);
    std::swap(ignore_younger_than_, other->ignore_younger_than_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurationKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurationKey_descriptor_;
  metadata.reflection = CurationKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurationValue::kLastCompletionTimestampFieldNumber;
#endif  // !_MSC_VER

CurationValue::CurationValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurationValue::InitAsDefaultInstance() {
}

CurationValue::CurationValue(const CurationValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurationValue::SharedCtor() {
  _cached_size_ = 0;
  last_completion_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurationValue::~CurationValue() {
  SharedDtor();
}

void CurationValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurationValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurationValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurationValue_descriptor_;
}

const CurationValue& CurationValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

CurationValue* CurationValue::default_instance_ = NULL;

CurationValue* CurationValue::New() const {
  return new CurationValue;
}

void CurationValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_completion_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurationValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_completion_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_completion_timestamp_)));
          set_has_last_completion_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurationValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_completion_timestamp = 1;
  if (has_last_completion_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_completion_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurationValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_completion_timestamp = 1;
  if (has_last_completion_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_completion_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurationValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_completion_timestamp = 1;
    if (has_last_completion_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_completion_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurationValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurationValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurationValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurationValue::MergeFrom(const CurationValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_completion_timestamp()) {
      set_last_completion_timestamp(from.last_completion_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurationValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurationValue::CopyFrom(const CurationValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurationValue::IsInitialized() const {
  
  return true;
}

void CurationValue::Swap(CurationValue* other) {
  if (other != this) {
    std::swap(last_completion_timestamp_, other->last_completion_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurationValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurationValue_descriptor_;
  metadata.reflection = CurationValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeletionProcessorDefinition::DeletionProcessorDefinition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeletionProcessorDefinition::InitAsDefaultInstance() {
}

DeletionProcessorDefinition::DeletionProcessorDefinition(const DeletionProcessorDefinition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeletionProcessorDefinition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletionProcessorDefinition::~DeletionProcessorDefinition() {
  SharedDtor();
}

void DeletionProcessorDefinition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletionProcessorDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletionProcessorDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletionProcessorDefinition_descriptor_;
}

const DeletionProcessorDefinition& DeletionProcessorDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

DeletionProcessorDefinition* DeletionProcessorDefinition::default_instance_ = NULL;

DeletionProcessorDefinition* DeletionProcessorDefinition::New() const {
  return new DeletionProcessorDefinition;
}

void DeletionProcessorDefinition::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletionProcessorDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeletionProcessorDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeletionProcessorDefinition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeletionProcessorDefinition::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletionProcessorDefinition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletionProcessorDefinition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletionProcessorDefinition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletionProcessorDefinition::MergeFrom(const DeletionProcessorDefinition& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletionProcessorDefinition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletionProcessorDefinition::CopyFrom(const DeletionProcessorDefinition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletionProcessorDefinition::IsInitialized() const {
  
  return true;
}

void DeletionProcessorDefinition::Swap(DeletionProcessorDefinition* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletionProcessorDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletionProcessorDefinition_descriptor_;
  metadata.reflection = DeletionProcessorDefinition_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace prometheus
}  // namespace io

// @@protoc_insertion_point(global_scope)
